
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Tue May 08 16:10:19 CDT 2012
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.10j generated parser.
  * @version Tue May 08 16:10:19 CDT 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\003\003\000\002\004" +
    "\004\000\002\004\002\000\002\006\003\000\002\006\003" +
    "\000\002\005\004\000\002\005\002\000\002\007\005\000" +
    "\002\010\006\000\002\011\004\000\002\011\005\000\002" +
    "\012\003\000\002\012\005\000\002\013\004\000\002\014" +
    "\006\000\002\015\004\000\002\015\002\000\002\016\004" +
    "\000\002\016\005\000\002\016\005\000\002\016\005\000" +
    "\002\016\005\000\002\016\012\000\002\016\012\000\002" +
    "\016\011\000\002\016\011\000\002\016\007\000\002\016" +
    "\012\000\002\016\017\000\002\016\012\000\002\016\005" +
    "\000\002\016\004\000\002\016\004\000\002\022\005\000" +
    "\002\022\006\000\002\017\003\000\002\017\005\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\004\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\004\000\002" +
    "\017\003\000\002\020\005\000\002\021\003\000\002\021" +
    "\004\000\002\021\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\005\000\002\021\003\000" +
    "\002\023\003\000\002\023\005\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\012\002\ufffe\004\ufffe\005\ufffe\006\ufffe\001" +
    "\002\000\012\002\000\004\015\005\014\006\010\001\002" +
    "\000\004\002\006\001\002\000\004\002\001\001\002\000" +
    "\012\002\uffff\004\uffff\005\uffff\006\uffff\001\002\000\004" +
    "\017\uffc1\001\002\000\004\017\016\001\002\000\012\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\001\002\000\012\002\ufffc" +
    "\004\ufffc\005\ufffc\006\ufffc\001\002\000\004\017\uffc0\001" +
    "\002\000\004\017\uffc2\001\002\000\050\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035" +
    "\uffbf\036\uffbf\037\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\001\002\000\006\025" +
    "\022\031\020\001\002\000\034\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\017" +
    "\ufff9\024\ufff9\036\ufff9\037\ufff9\001\002\000\004\023\033" +
    "\001\002\000\012\004\015\005\014\006\010\026\023\001" +
    "\002\000\004\023\ufff7\001\002\000\004\017\016\001\002" +
    "\000\004\026\031\001\002\000\006\026\ufff5\027\027\001" +
    "\002\000\010\004\015\005\014\006\010\001\002\000\004" +
    "\026\ufff4\001\002\000\004\023\ufff6\001\002\000\006\026" +
    "\ufff3\027\ufff3\001\002\000\032\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\017\ufffa\024" +
    "\ufffa\036\ufffa\037\ufffa\001\002\000\012\002\ufff8\004\ufff8" +
    "\005\ufff8\006\ufff8\001\002\000\032\004\015\005\014\006" +
    "\010\007\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\017\ufff0" +
    "\024\ufff0\036\ufff0\037\ufff0\001\002\000\004\017\016\001" +
    "\002\000\032\004\ufffb\005\ufffb\006\ufffb\007\ufffb\011\ufffb" +
    "\012\ufffb\013\ufffb\014\ufffb\017\ufffb\024\ufffb\036\ufffb\037" +
    "\ufffb\001\002\000\024\007\050\011\041\012\053\013\046" +
    "\014\043\017\016\024\051\036\044\037\054\001\002\000" +
    "\004\025\223\001\002\000\012\025\130\030\132\036\220" +
    "\037\217\001\002\000\004\025\201\001\002\000\004\017" +
    "\016\001\002\000\024\007\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\017\ufff1\024\ufff1\036\ufff1\037\ufff1\001\002\000" +
    "\004\025\162\001\002\000\004\031\161\001\002\000\004" +
    "\025\145\001\002\000\012\002\ufff2\004\ufff2\005\ufff2\006" +
    "\ufff2\001\002\000\004\031\144\001\002\000\022\017\016" +
    "\020\072\021\060\022\067\025\071\031\065\033\057\040" +
    "\070\001\002\000\004\017\016\001\002\000\004\031\056" +
    "\001\002\000\024\007\uffed\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\017\uffed\024\uffed\036\uffed\037\uffed\001\002\000\014" +
    "\017\016\020\072\021\060\022\067\025\071\001\002\000" +
    "\040\026\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8" +
    "\035\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\001\002\000\050\025\130\026\uffcc" +
    "\027\uffcc\030\132\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\036\131\037\127\041\uffcc\042\uffcc\043\uffcc\044\uffcc" +
    "\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000\040\026" +
    "\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035\uffce" +
    "\041\uffce\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047" +
    "\uffce\050\uffce\001\002\000\034\031\126\032\104\033\074" +
    "\034\103\035\076\041\075\042\110\043\107\044\077\045" +
    "\105\046\102\047\100\050\101\001\002\000\040\026\uffdd" +
    "\027\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\041" +
    "\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\001\002\000\024\007\uffe1\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\017\uffe1\024\uffe1\036\uffe1\037\uffe1\001\002" +
    "\000\040\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\001\002\000\040\026\uffc7\027" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\041\uffc7" +
    "\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\001\002\000\020\017\016\020\072\021\060\022\067" +
    "\025\071\033\057\040\070\001\002\000\020\017\016\020" +
    "\072\021\060\022\067\025\071\033\057\040\070\001\002" +
    "\000\040\026\uffc9\027\uffc9\031\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\046\uffc9\047\uffc9\050\uffc9\001\002\000\034\026\106\032" +
    "\104\033\074\034\103\035\076\041\075\042\110\043\107" +
    "\044\077\045\105\046\102\047\100\050\101\001\002\000" +
    "\020\017\016\020\072\021\060\022\067\025\071\033\057" +
    "\040\070\001\002\000\020\017\016\020\072\021\060\022" +
    "\067\025\071\033\057\040\070\001\002\000\020\017\016" +
    "\020\072\021\060\022\067\025\071\033\057\040\070\001" +
    "\002\000\020\017\016\020\072\021\060\022\067\025\071" +
    "\033\057\040\070\001\002\000\020\017\016\020\072\021" +
    "\060\022\067\025\071\033\057\040\070\001\002\000\020" +
    "\017\016\020\072\021\060\022\067\025\071\033\057\040" +
    "\070\001\002\000\020\017\016\020\072\021\060\022\067" +
    "\025\071\033\057\040\070\001\002\000\020\017\016\020" +
    "\072\021\060\022\067\025\071\033\057\040\070\001\002" +
    "\000\020\017\016\020\072\021\060\022\067\025\071\033" +
    "\057\040\070\001\002\000\020\017\016\020\072\021\060" +
    "\022\067\025\071\033\057\040\070\001\002\000\040\026" +
    "\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\001\002\000\020\017\016\020\072\021\060" +
    "\022\067\025\071\033\057\040\070\001\002\000\020\017" +
    "\016\020\072\021\060\022\067\025\071\033\057\040\070" +
    "\001\002\000\040\026\uffd6\027\uffd6\031\uffd6\032\104\033" +
    "\074\034\103\035\076\041\075\042\uffd6\043\107\044\077" +
    "\045\105\046\102\047\100\050\101\001\002\000\024\026" +
    "\uffd5\027\uffd5\031\uffd5\032\104\033\074\034\103\035\076" +
    "\041\uffd5\042\uffd5\001\002\000\024\026\uffd3\027\uffd3\031" +
    "\uffd3\032\104\033\074\034\103\035\076\041\uffd3\042\uffd3" +
    "\001\002\000\040\026\uffdc\027\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\103\035\076\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\046\uffdc\047\uffdc\050\uffdc\001\002\000\040\026" +
    "\uffda\027\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\041\uffda\042\uffda\043\uffda\044\uffda\045\uffda\046\uffda\047" +
    "\uffda\050\uffda\001\002\000\024\026\uffd2\027\uffd2\031\uffd2" +
    "\032\104\033\074\034\103\035\076\041\uffd2\042\uffd2\001" +
    "\002\000\024\026\uffd0\027\uffd0\031\uffd0\032\104\033\074" +
    "\034\103\035\076\041\uffd0\042\uffd0\001\002\000\024\026" +
    "\uffd1\027\uffd1\031\uffd1\032\104\033\074\034\103\035\076" +
    "\041\uffd1\042\uffd1\001\002\000\024\026\uffd4\027\uffd4\031" +
    "\uffd4\032\104\033\074\034\103\035\076\041\uffd4\042\uffd4" +
    "\001\002\000\040\026\uffd9\027\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\034\uffd9\035\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9" +
    "\045\uffd9\046\uffd9\047\uffd9\050\uffd9\001\002\000\040\026" +
    "\uffd7\027\uffd7\031\uffd7\032\104\033\074\034\103\035\076" +
    "\041\uffd7\042\uffd7\043\107\044\077\045\105\046\102\047" +
    "\100\050\101\001\002\000\040\026\uffdb\027\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\103\035\076\041\uffdb\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\001\002" +
    "\000\040\026\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\034" +
    "\uffd8\035\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\047\uffd8\050\uffd8\001\002\000\024\007\uffe2\011" +
    "\uffe2\012\uffe2\013\uffe2\014\uffe2\017\uffe2\024\uffe2\036\uffe2" +
    "\037\uffe2\001\002\000\040\026\uffca\027\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\035\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\001\002\000" +
    "\022\017\016\020\072\021\060\022\067\025\071\026\136" +
    "\033\057\040\070\001\002\000\040\026\uffcb\027\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\001" +
    "\002\000\020\017\016\020\072\021\060\022\067\025\071" +
    "\033\057\040\070\001\002\000\040\026\uffcd\027\uffcd\031" +
    "\uffcd\032\104\033\074\034\103\035\076\041\075\042\110" +
    "\043\107\044\077\045\105\046\102\047\100\050\101\001" +
    "\002\000\036\026\uffc4\027\uffc4\032\104\033\074\034\103" +
    "\035\076\041\075\042\110\043\107\044\077\045\105\046" +
    "\102\047\100\050\101\001\002\000\006\026\140\027\137" +
    "\001\002\000\040\026\uffdf\027\uffdf\031\uffdf\032\uffdf\033" +
    "\uffdf\034\uffdf\035\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf" +
    "\045\uffdf\046\uffdf\047\uffdf\050\uffdf\001\002\000\020\017" +
    "\016\020\072\021\060\022\067\025\071\033\057\040\070" +
    "\001\002\000\040\026\uffde\027\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\041\uffde\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\046\uffde\047\uffde\050\uffde\001\002\000\036\026" +
    "\uffc3\027\uffc3\032\104\033\074\034\103\035\076\041\075" +
    "\042\110\043\107\044\077\045\105\046\102\047\100\050" +
    "\101\001\002\000\040\026\uffcf\027\uffcf\031\uffcf\032\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\041\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\001\002\000\046" +
    "\025\130\026\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\131\037\127\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\001\002\000" +
    "\024\007\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0\017\uffe0" +
    "\024\uffe0\036\uffe0\037\uffe0\001\002\000\020\017\016\020" +
    "\072\021\060\022\067\025\071\033\057\040\070\001\002" +
    "\000\034\026\147\032\104\033\074\034\103\035\076\041" +
    "\075\042\110\043\107\044\077\045\105\046\102\047\100" +
    "\050\101\001\002\000\004\023\150\001\002\000\032\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\017\ufffa\024\ufffa\036\ufffa\037\ufffa\001\002\000" +
    "\032\004\015\005\014\006\010\007\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\017\ufff0\024\ufff0\036\ufff0\037\ufff0\001" +
    "\002\000\024\007\050\011\041\012\053\013\046\014\043" +
    "\017\016\024\153\036\044\037\054\001\002\000\026\007" +
    "\uffe5\010\154\011\uffe5\012\uffe5\013\uffe5\014\uffe5\017\uffe5" +
    "\024\uffe5\036\uffe5\037\uffe5\001\002\000\004\023\155\001" +
    "\002\000\032\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa" +
    "\012\ufffa\013\ufffa\014\ufffa\017\ufffa\024\ufffa\036\ufffa\037" +
    "\ufffa\001\002\000\032\004\015\005\014\006\010\007\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\014\ufff0\017\ufff0\024\ufff0\036" +
    "\ufff0\037\ufff0\001\002\000\024\007\050\011\041\012\053" +
    "\013\046\014\043\017\016\024\160\036\044\037\054\001" +
    "\002\000\024\007\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\017\uffe4\024\uffe4\036\uffe4\037\uffe4\001\002\000\024\007" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\017\uffef\024\uffef" +
    "\036\uffef\037\uffef\001\002\000\006\015\164\016\163\001" +
    "\002\000\004\027\172\001\002\000\004\027\165\001\002" +
    "\000\004\051\166\001\002\000\004\017\016\001\002\000" +
    "\004\026\170\001\002\000\004\031\171\001\002\000\024" +
    "\007\uffea\011\uffea\012\uffea\013\uffea\014\uffea\017\uffea\024" +
    "\uffea\036\uffea\037\uffea\001\002\000\004\051\173\001\002" +
    "\000\004\017\016\001\002\000\004\026\175\001\002\000" +
    "\004\031\176\001\002\000\024\007\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\014\uffe9\017\uffe9\024\uffe9\036\uffe9\037\uffe9\001" +
    "\002\000\004\031\200\001\002\000\024\007\uffee\011\uffee" +
    "\012\uffee\013\uffee\014\uffee\017\uffee\024\uffee\036\uffee\037" +
    "\uffee\001\002\000\010\015\204\016\203\022\202\001\002" +
    "\000\004\026\215\001\002\000\004\027\211\001\002\000" +
    "\004\027\205\001\002\000\020\017\016\020\072\021\060" +
    "\022\067\025\071\033\057\040\070\001\002\000\034\026" +
    "\207\032\104\033\074\034\103\035\076\041\075\042\110" +
    "\043\107\044\077\045\105\046\102\047\100\050\101\001" +
    "\002\000\004\031\210\001\002\000\024\007\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\017\uffe8\024\uffe8\036\uffe8\037" +
    "\uffe8\001\002\000\020\017\016\020\072\021\060\022\067" +
    "\025\071\033\057\040\070\001\002\000\034\026\213\032" +
    "\104\033\074\034\103\035\076\041\075\042\110\043\107" +
    "\044\077\045\105\046\102\047\100\050\101\001\002\000" +
    "\004\031\214\001\002\000\024\007\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\017\uffe7\024\uffe7\036\uffe7\037\uffe7\001" +
    "\002\000\004\031\216\001\002\000\024\007\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\017\uffe6\024\uffe6\036\uffe6\037" +
    "\uffe6\001\002\000\004\031\222\001\002\000\004\031\221" +
    "\001\002\000\024\007\uffec\011\uffec\012\uffec\013\uffec\014" +
    "\uffec\017\uffec\024\uffec\036\uffec\037\uffec\001\002\000\024" +
    "\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\017\uffeb\024" +
    "\uffeb\036\uffeb\037\uffeb\001\002\000\020\017\016\020\072" +
    "\021\060\022\067\025\071\033\057\040\070\001\002\000" +
    "\034\026\225\032\104\033\074\034\103\035\076\041\075" +
    "\042\110\043\107\044\077\045\105\046\102\047\100\050" +
    "\101\001\002\000\004\023\226\001\002\000\032\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\017\ufffa\024\ufffa\036\ufffa\037\ufffa\001\002\000\032" +
    "\004\015\005\014\006\010\007\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\017\ufff0\024\ufff0\036\ufff0\037\ufff0\001\002" +
    "\000\024\007\050\011\041\012\053\013\046\014\043\017" +
    "\016\024\231\036\044\037\054\001\002\000\024\007\uffe3" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\017\uffe3\024\uffe3\036" +
    "\uffe3\037\uffe3\001\002\000\004\031\020\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\003\004\004\003\001\001\000\012\006" +
    "\006\007\011\010\012\024\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\020\001\001\000\002\001\001\000\004\014\033" +
    "\001\001\000\010\012\024\013\025\024\023\001\001\000" +
    "\002\001\001\000\004\025\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\027\013\025\024\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\034\001\001\000\002\001\001\000\010\007" +
    "\036\015\037\024\035\001\001\000\004\025\231\001\001" +
    "\000\002\001\001\000\012\016\044\020\046\022\051\025" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\017\062\020\063\021" +
    "\061\022\065\025\060\001\001\000\004\025\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\141\022" +
    "\065\025\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\017\124\020\063\021\061\022\065\025\060\001\001\000" +
    "\014\017\072\020\063\021\061\022\065\025\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\017\123\020" +
    "\063\021\061\022\065\025\060\001\001\000\014\017\122" +
    "\020\063\021\061\022\065\025\060\001\001\000\014\017" +
    "\121\020\063\021\061\022\065\025\060\001\001\000\014" +
    "\017\120\020\063\021\061\022\065\025\060\001\001\000" +
    "\014\017\117\020\063\021\061\022\065\025\060\001\001" +
    "\000\014\017\116\020\063\021\061\022\065\025\060\001" +
    "\001\000\014\017\115\020\063\021\061\022\065\025\060" +
    "\001\001\000\014\017\114\020\063\021\061\022\065\025" +
    "\060\001\001\000\014\017\113\020\063\021\061\022\065" +
    "\025\060\001\001\000\014\017\112\020\063\021\061\022" +
    "\065\025\060\001\001\000\002\001\001\000\014\017\111" +
    "\020\063\021\061\022\065\025\060\001\001\000\014\017" +
    "\110\020\063\021\061\022\065\025\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\017\133\020\063\021" +
    "\061\022\065\023\134\025\060\001\001\000\002\001\001" +
    "\000\014\017\132\020\063\021\061\022\065\025\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\140\020\063\021\061\022" +
    "\065\025\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\017\145\020\063\021\061\022\065\025\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\150\001" +
    "\001\000\010\007\036\015\151\024\035\001\001\000\012" +
    "\016\044\020\046\022\051\025\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\155\001\001\000\010" +
    "\007\036\015\156\024\035\001\001\000\012\016\044\020" +
    "\046\022\051\025\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\205\020\063\021\061\022" +
    "\065\025\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\017\211\020\063\021\061\022" +
    "\065\025\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\223\020\063\021\061\022\065\025" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\226\001\001\000\010\007\036\015\227\024\035\001" +
    "\001\000\012\016\044\020\046\022\051\025\041\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
       Errors.fatal(0,0, "Syntax error at end of file");
    }
    else {
       Errors.fatal(((TokenVal)currToken.value).linenum,
	            ((TokenVal)currToken.value).charnum,
		    "Syntax error");
    }
    System.exit(-1);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // id ::= ID 
            {
              IdNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IdTokenVal i = (IdTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= VOID 
            {
              TypeNode RESULT = null;
		 RESULT = new VoidNode();
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // type ::= DBL 
            {
              TypeNode RESULT = null;
		 RESULT = new DblNode();
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type ::= INT 
            {
              TypeNode RESULT = null;
		 RESULT = new IntNode();
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // actualList ::= actualList COMMA exp 
            {
              LinkedList RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList L = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 L.addLast(e);
		   RESULT = L;
	 	
              CUP$parser$result = new java_cup.runtime.Symbol(17/*actualList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // actualList ::= exp 
            {
              LinkedList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList<ExpNode> L = new LinkedList<ExpNode>();
		   L.addLast(e);
		   RESULT = L;
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*actualList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // term ::= fncall 
            {
              ExpNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CallExpNode f = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= LPAREN exp RPAREN 
            {
              ExpNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= STRINGLITERAL 
            {
              ExpNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StrLitTokenVal s = (StrLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= DBLLITERAL 
            {
              ExpNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DblLitTokenVal d = (DblLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DblLitNode(d.linenum, d.charnum, d.dblVal);
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= INTLITERAL 
            {
              ExpNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IntLitTokenVal i = (IntLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= id MINUSMINUS 
            {
              ExpNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MinusMinusNode(i);
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= id PLUSPLUS 
            {
              ExpNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PlusPlusNode(i);
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= id 
            {
              ExpNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assign_exp ::= id ASSIGN exp 
            {
              AssignNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AssignNode(l, e);
		
              CUP$parser$result = new java_cup.runtime.Symbol(14/*assign_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= term 
            {
              ExpNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = t;
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= MINUS term 
            {
              ExpNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode t = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new UnaryMinusNode(t);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp GREATEREQ exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new GreaterEqNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp LESSEQ exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LessEqNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp GREATER exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new GreaterNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp LESS exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LessNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp NOTEQUALS exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NotEqualsNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp EQUALS exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new EqualsNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp OR exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OrNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp AND exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new AndNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= NOT exp 
            {
              ExpNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new NotNode(e);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp DIVIDE exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DivideNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp STAR exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TimesNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp MINUS exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new MinusNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp PLUS exp 
            {
              ExpNode RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e1 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ExpNode e2 = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PlusNode(e1, e2);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= assign_exp 
            {
              ExpNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		AssignNode e = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fncall ::= id LPAREN actualList RPAREN 
            {
              CallExpNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList L = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallExpNode(i, new ExpListNode(L));
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*fncall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fncall ::= id LPAREN RPAREN 
            {
              CallExpNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallExpNode(i,
					    new ExpListNode(new LinkedList<ExpNode>()));
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*fncall*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= fncall SEMICOLON 
            {
              StmtNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallExpNode f = (CallExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallStmtNode(f);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN SEMICOLON 
            {
              StmtNode RESULT = null;
		 RESULT = new ReturnStmtNode(null);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN exp SEMICOLON 
            {
              StmtNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmtNode(e);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList l = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileStmtNode(e,
					      new DeclListNode(d),
					      new StmtListNode(l));
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList td = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList ts = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList ed = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList es = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfElseStmtNode(e,
					       new DeclListNode(td),
					       new StmtListNode(ts),
					       new DeclListNode(ed),
					       new StmtListNode(es));
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY 
            {
              StmtNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStmtNode(e,
					   new DeclListNode(d),
					   new StmtListNode(s));
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= PRINTF LPAREN STRINGLITERAL RPAREN SEMICOLON 
            {
              StmtNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		StrLitTokenVal s = (StrLitTokenVal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteStrStmtNode(new StringLitNode(s.linenum,
					 		           s.charnum,
							           s.strVal)
					         );
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= PRINTF LPAREN DBL_FORMAT COMMA exp RPAREN SEMICOLON 
            {
              StmtNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteDblStmtNode(e);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= PRINTF LPAREN INT_FORMAT COMMA exp RPAREN SEMICOLON 
            {
              StmtNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpNode e = (ExpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteIntStmtNode(e);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= SCANF LPAREN DBL_FORMAT COMMA AMPERSAND id RPAREN SEMICOLON 
            {
              StmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadDblStmtNode(l);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= SCANF LPAREN INT_FORMAT COMMA AMPERSAND id RPAREN SEMICOLON 
            {
              StmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadIntStmtNode(l);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= id MINUSMINUS SEMICOLON 
            {
              StmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostDecStmtNode(l);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= id PLUSPLUS SEMICOLON 
            {
              StmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new PostIncStmtNode(l);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= MINUSMINUS id SEMICOLON 
            {
              StmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PreDecStmtNode(l);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= PLUSPLUS id SEMICOLON 
            {
              StmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode l = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PreIncStmtNode(l);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= assign_exp SEMICOLON 
            {
              StmtNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignNode e = (AssignNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AssignStmtNode(e);
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmtList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList<StmtNode>();
		
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmtList ::= stmtList stmt 
            {
              LinkedList RESULT = null;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList L = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		StmtNode s = (StmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 L.addLast(s);
		   RESULT = L;
		
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // fnBody ::= LCURLY varDeclList stmtList RCURLY 
            {
              FnBodyNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList s = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FnBodyNode(new DeclListNode(d),
				           new StmtListNode(s));
		
              CUP$parser$result = new java_cup.runtime.Symbol(10/*fnBody*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // formalDecl ::= type id 
            {
              FormalDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FormalDeclNode(t, i);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*formalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // formalsList ::= formalDecl COMMA formalsList 
            {
              LinkedList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		FormalDeclNode v = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int Lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int Lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList L = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 L.addFirst(v);
		   RESULT = L;
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*formalsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // formalsList ::= formalDecl 
            {
              LinkedList RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FormalDeclNode v = (FormalDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 LinkedList<FormalDeclNode> L = new LinkedList<FormalDeclNode>();
		   L.addLast(v);
		   RESULT = L;
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*formalsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formals ::= LPAREN formalsList RPAREN 
            {
              FormalsListNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList f = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FormalsListNode(f);
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // formals ::= LPAREN RPAREN 
            {
              FormalsListNode RESULT = null;
		 RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
		
              CUP$parser$result = new java_cup.runtime.Symbol(7/*formals*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fnDecl ::= type id formals fnBody 
            {
              FnDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FormalsListNode f = (FormalsListNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FnBodyNode b = (FnBodyNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new FnDeclNode(t, i, f, b);
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*fnDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDecl ::= type id SEMICOLON 
            {
              VarDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeNode t = (TypeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdNode i = (IdNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclNode(t, i);
		
              CUP$parser$result = new java_cup.runtime.Symbol(5/*varDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varDeclList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList<VarDeclNode>();
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // varDeclList ::= varDeclList varDecl 
            {
              LinkedList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		VarDeclNode d = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 dl.addLast(d);
		   RESULT = dl;
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*varDeclList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= fnDecl 
            {
              DeclNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FnDeclNode f = (FnDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = f;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= varDecl 
            {
              DeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		VarDeclNode v = (VarDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declList ::= 
            {
              LinkedList RESULT = null;
		 RESULT = new LinkedList<DeclNode>();
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*declList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declList ::= declList decl 
            {
              LinkedList RESULT = null;
		int dlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList dl = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DeclNode d = (DeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 dl.addLast(d);
		   RESULT = dl;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*declList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declList 
            {
              ProgramNode RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LinkedList d = (LinkedList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ProgramNode(new DeclListNode(d));
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramNode start_val = (ProgramNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

